rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can manage their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Allow user to create their own doc

      // Notifications are a subcollection of a user document
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
        // 'write' covers create and update
    }

      // Wallets subcollection (similar pattern as notifications)
    match /wallets/{walletId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

      // Expenses subcollection (similar pattern)
    match /expenses/{expenseId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

      // ExpenseCategories subcollection (similar pattern)
      match /expenseCategories/{categoryId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Settings subcollection for onboarding and other user settings
      match /settings/{settingId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      // Analytics subcollection for user-specific event tracking
      match /analytics/{eventId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Add other subcollections like 'savingsGoals', 'spendingAlerts' if they exist
      // and follow the same user-specific pattern.
      match /savingsGoals/{goalId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /spendingAlerts/{alertId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /categoryBudgets/{budgetId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      // Import/Export collections
      match /importPresets/{presetId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /importActivity/{activityId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      match /exportActivity/{activityId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Recurring Transactions collection - user-specific access
    match /recurringTransactions/{recurringId} {
      // Allow users to create recurring transactions
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      // Allow users to read, update, and delete their own recurring transactions
      allow read, update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Budget Templates collection - system templates readable by all, user templates restricted
    match /budgetTemplates/{templateId} {
      // Allow all authenticated users to read system templates
      allow read: if request.auth != null && resource.data.isSystem == true;
      // Allow users to read their own templates
      allow read: if request.auth != null && resource.data.createdBy == request.auth.uid;
      // Allow users to create their own templates
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid && request.resource.data.isSystem == false;
      // Allow users to update/delete their own templates
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid && resource.data.isSystem == false;
      // Allow system to create system templates (for seeding)
      allow create: if request.auth != null && request.resource.data.isSystem == true;
      // Allow system to update/delete system templates (for cleanup and maintenance)
      allow update, delete: if request.auth != null && resource.data.isSystem == true;

      // Template items subcollection
      match /items/{itemId} {
        // Allow read access to template items if user can read the parent template
        allow read: if request.auth != null;
        // Allow write access to template items if user can write to the parent template
        allow write: if request.auth != null;
        // Allow delete access to template items for cleanup
        allow delete: if request.auth != null;
      }
    }

    // Analytics collection for tracking user events
    match /analytics/{analyticsType} {
      // Allow authenticated users to write analytics events
      allow write: if request.auth != null;
      // Allow read access for analytics (optional, can be restricted)
      allow read: if request.auth != null;
      
      match /events/{eventId} {
        allow write: if request.auth != null;
        allow read: if request.auth != null;
      }
    }

    // If you had a global 'notifications' collection before, this rule would be too open.
    // It's better to make notifications user-specific as done above.
    // match /notifications/{notificationId} {
    //   allow read, write: if request.auth != null; // Example: Too permissive
    // }
  }
}